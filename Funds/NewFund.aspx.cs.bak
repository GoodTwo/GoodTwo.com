using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.IO;
using goodtooDraft.App_Code;
using System.Xml;
using System.Xml.Serialization;
using System.Net.Mail;
using System.Text;
using System.Web.Security;
using System.Data.SqlClient;
using System.Text.RegularExpressions;
using System.Web.UI.WebControls.DomValidators;
using System.Configuration;
using System.Data;
using WebServices;

public partial class Funds_NewFund : System.Web.UI.Page
{
    public string ReplaceNewLineWithBr(string s)
    {
        return s.Replace(Environment.NewLine, "<br />");
    }
    protected void Page_Load(object sender, EventArgs e)
    {
        /*
        string script;
        if (Page.IsPostBack)
        {
            script = "var isPostBack = true;";
        }
        else
        {
            script = "var isPostBack = false;";
        }
        Page.ClientScript.RegisterStartupScript(GetType(), "IsPostBack", script, true);
        */
    
        //Populate the state selection list
        if (!Page.IsPostBack)
        {
            MembershipUser m = Membership.GetUser();
            Guid userid = (Guid)m.ProviderUserKey;
            Administration admin = new Administration();
            int? id = admin.CheckForFund(userid);
            if (id.HasValue)
            {
                Response.Redirect("fund.aspx?id=" + id.Value);
            }
           
            //Populate the state selection list
            XmlTextReader xr = new XmlTextReader(MapPath("../RegionsXmlList.xml"));
            bool firstSet = false;
            while (xr.Read())
            {
                if ((xr.NodeType == XmlNodeType.Element) && (xr.Name == "State"))
                {
                    StateList.Items.Add(new ListItem(xr.GetAttribute("Name"), xr.GetAttribute("Code")));
                    if (!firstSet)
                    {
                        firstSet = true;
                        while ((xr.Read()) && (!((xr.NodeType == XmlNodeType.EndElement) && (xr.Name == "State"))))
                        {
                            if ((xr.NodeType == XmlNodeType.Element) && (xr.Name == "City"))
                            {
                                CityList.Items.Add(new ListItem(xr.GetAttribute("Name"), xr.GetAttribute("Code")));
                            }
                        }
                    }
                }
            }
        }
        else
        {
            Page.Validate();
        }
    }
    protected void SubmitButton_Click(object sender, EventArgs e)
    {
        //SqlConnection conn = null;
        //int eventId;

        if (Page.IsValid)
        {

            string name = NameTextBox.Text;
            string email = EmailTextBox.Text;
            string phone = PhoneTextBox.Text;
            string title = TitleTextBox.Text;
            string cause = CauseNameTextBox.Text;
            string logoPath = null;
            string photoPath = null;
            string video = VideoTextBox.Text;
            string tagline = TaglineTextBox.Text;
            string body = ReplaceNewLineWithBr(BodyTextBox.Text);
            string website = WebSiteTextBox.Text;
            string goal = GoalTextBox.Text;
            decimal goalNum;
            if (!decimal.TryParse(goal, out goalNum))
                goalNum = 0;
            string endDateText = EndDateTextBox.Text;
            DateTime endDate;
            if (!DateTime.TryParse(endDateText, out endDate))
                endDate = DateTime.Now;
            string state = StateList.SelectedValue;
            //string city = CityList.SelectedItem.Text;
            string city = CityHiddenField.Value;
            string paymentName = PaymentNameTextBox.Text;
            string paymentAddress = PaymentAddressTextBox.Text;
            MembershipUser m = Membership.GetUser();
            
            
       

            try
            {
                if (LogoUpload.HasFile)
                {
                    string file = Path.GetFileName(LogoUpload.FileName);
                    logoPath = Path.Combine(Server.MapPath("~"), "Images");//title.Replace(' ', '_') + @"\";
                    //if (!Directory.Exists(logoPath))
                    //    Directory.CreateDirectory(logoPath);

                    logoPath = Path.Combine(logoPath, file);
                    //save the file to the server
                    try
                    {
                        LogoUpload.PostedFile.SaveAs(logoPath);
                    }
                    catch (Exception ex)
                    {
                        Response.Write(@"<script language='javascript'>alert('The following errors have occurred: \n" + ex.Message.Replace('\'', '\"') + " (" + ex.InnerException.Replace('\'', '\"') + ") .');</script>");
                        ErrHandler.WriteError(ex.Message + " (InnerException: " + ex.InnerException + ")");
                        return;
                    }
                    
                }
                if (PhotoUpload.HasFile)
                {
                    string file = Path.GetFileName(PhotoUpload.FileName);

                    photoPath = Path.Combine(Server.MapPath("~"), "Images");//title.Replace(' ', '_') + @"\";
                    //if (!Directory.Exists(photoPath))
                    //    Directory.CreateDirectory(photoPath);

                    photoPath = Path.Combine(photoPath, file);

                    //save the file to the server
                    try
                    {
                        PhotoUpload.SaveAs(photoPath);
                    }
                    catch (Exception ex)
                    {
                        Response.Write(@"<script language='javascript'>alert('The following errors have occurred: \n" + ex.Message.Replace('\'', '\"') + " (" + ex.InnerException.Replace('\'', '\"') + ") .');</script>");
                        ErrHandler.WriteError(ex.Message + " (InnerException: " + ex.InnerException + ")");
                        return;
                    }
                }


                Session["UserName"] = name;
                Session["Email"] = email;
                Session["PhoneNumber"] = phone;
                Session["Title"] = title;
                Session["CauseName"] = cause;
                Session["Logo"] = logoPath;
                Session["Photo"] = (photoPath == null) ? null : photoPath;
                Session["Video"] = (video == null) ? null : video;
                Session["Tagline"] = tagline;
                Session["Body"] = body;
                Session["WebSite"] = (website.Equals("")) ? null : website;
                Session["Goal"] = goalNum;
                Session["EndDate"] = endDate;
                Session["State"] = state;
                Session["City"] = city;
                Session["PaymentName"] = (paymentName.Equals("")) ? name : paymentName;
                Session["PaymentAddress"] = paymentAddress;
                Session["UserId"] = (Guid)m.ProviderUserKey;

                //Response.Redirect("EULAConfirmation.aspx", false);
                Response.Redirect("Products.aspx", false);

                /*
                // create and open a connection object
                conn = new SqlConnection(ConfigurationManager.ConnectionStrings["goodtwoDbConnectionString1"].ConnectionString);
                conn.Open();

                // 1.  create a command object identifying
                //     the stored procedure
                SqlCommand cmd = new SqlCommand("CharityEvent_InsertPending", conn);

                // 2. set the command object so it knows
                //    to execute a stored procedure
                cmd.CommandType = CommandType.StoredProcedure;

                // 4. add parameter to command, which
                //    will be passed to the stored procedure
                cmd.Parameters.Add(new SqlParameter("@Logo", logoPath));
                cmd.Parameters.Add(new SqlParameter("@Tagline", tagline));
                cmd.Parameters.Add(new SqlParameter("@Body", body));
                cmd.Parameters.Add(new SqlParameter("@Photo", photoPath));
                cmd.Parameters.Add(new SqlParameter("@Title", title));
                cmd.Parameters.Add(new SqlParameter("@City", city));
                cmd.Parameters.Add(new SqlParameter("@State", state));
                cmd.Parameters.Add(new SqlParameter("@WebSite", website));
                cmd.Parameters.Add(new SqlParameter("@Goal", goalNum));
                cmd.Parameters.Add(new SqlParameter("@EndDate", endDate));
                cmd.Parameters.Add(new SqlParameter("@UserId", (Guid)m.ProviderUserKey));
                cmd.Parameters.Add(new SqlParameter("@UserName", name));
                cmd.Parameters.Add(new SqlParameter("@Email", email));
                cmd.Parameters.Add(new SqlParameter("@PhoneNumber", phone));
                cmd.Parameters.Add(new SqlParameter("@CauseName", cause));
                cmd.Parameters.Add(new SqlParameter("@Video", video));
                cmd.Parameters.Add(new SqlParameter("@PaymentName", paymentName));
                cmd.Parameters.Add(new SqlParameter("@PaymentAddress", paymentAddress));

                // execute the command
                eventId = Convert.ToInt32(cmd.ExecuteScalar());

                Response.Redirect("EULAConfirmation.aspx?id=" + eventId);
                 * */
            }
            catch (Exception ex)
            {
                ErrHandler.WriteError(ex.Message + " (InnerException: " + ex.InnerException + ")");
                //Response.Write(@"<script language='javascript'>alert('The following errors have occurred: \n" + ex.Message + " (" + ex.InnerException + ") .');</script>"); 
                //Console.WriteLine(ex.Message);
                //return;
            }
            finally
            {
                /*
                if (conn != null)
                {
                    conn.Closed();
                }
                 * */
            }
        }
    }
    public override void Validate()
    {
        base.Validate();
        //GetValidators(
    }
    protected void StateList_SelectedIndexChanged(object sender, EventArgs e)
    {
        //Get selected state
        string state = StateList.SelectedValue;

        XmlDataSource cityDataSource = new XmlDataSource();
        cityDataSource.ID = "citySource";
        cityDataSource.DataFile = MapPath("../RegionsXmlList.xml");
        cityDataSource.XPath = "RegionList/StateList/State[@Code='" + state + "']/CityList/City";
        CityList.DataSource = cityDataSource;
        CityList.DataBind();
    }

    /*
    private bool mailEvent(CharityEvent eve, int id)
    {
        MailMessage msg = new MailMessage(eve.Email, GoodTwoConstants.fundraiserMailingAddress);
        StringBuilder bb = new StringBuilder();
        msg.Subject = "New Fundraiser";

        bb.AppendLine("EventId:         " + id);
        bb.AppendLine("User Name:       " + eve.UserName);
        bb.AppendLine("Email Address:   " + eve.Email);
        bb.AppendLine("Phone Number:    " + eve.PhoneNumber);
        bb.AppendLine("Title:           " + eve.Title);
        bb.AppendLine("Cause Name:      " + eve.CauseName);
        bb.AppendLine("Logo:            " + eve.Logo);
        bb.AppendLine("Photo:           " + eve.Photo);
        bb.AppendLine("Video:           " + eve.Video);
        bb.AppendLine("TagLine:         " + eve.Tagline);
        bb.AppendLine("Body:            " + eve.Body);
        bb.AppendLine("Website:         " + eve.WebSite);
        bb.AppendLine("Goal:            " + eve.Goal);
        bb.AppendLine("End Date:        " + eve.EndDate);
        bb.AppendLine("State:           " + eve.State);
        bb.AppendLine("City:            " + eve.City);
        bb.AppendLine("Payment Name:    " + eve.PaymentName);
        bb.AppendLine("Payment Address: " + eve.PaymentAddress);
        bb.AppendLine("UserId:        " + eve.UserId);
        msg.Body = bb.ToString();

        SmtpClient sc = new SmtpClient(GoodTwoConstants.smtpServer);
        try
        {
            sc.Send(msg);
            return true;
        }
        catch (Exception e)
        {
            ErrHandler.WriteError(e.Message + " (InnerException: " + e.InnerException + ")");
            Console.WriteLine("Failed to send email: " + e.Message + " (" + e.InnerException + ")");
            return false;
        }

    }
    */
    protected void TaglineCustomDomValidator_ServerValidate(object source, ServerValidateEventArgs args)
    {
        string[] numOfWords = args.Value.Split(new char[] { ' ' });
        args.IsValid = numOfWords.Length <= 50;

    }

    protected void BodyCustomDomValidator_ServerValidate(object source, ServerValidateEventArgs args)
    {
        string[] numOfWords = args.Value.Split(new char[] { ' ' });
        args.IsValid = numOfWords.Length <= 250;
    }

    /*
    protected void GetProductsButton_Click(object sender, EventArgs e)
    {
        //MemoryStream ms = null;
        StringWriter sw = null;
        string region = CityList.SelectedValue;

        //Build the query string
        //string productsURL = Utils.GetAPIGenericWhereURL(EDIName.Products, "p.ProductID,p.ProductName", GoodTwoConstants.productRegionField, region);
        string productsURL = Utils.GetAPIGenericURL(EDIName.Products);

        try
        {
            XMLPostManager manager = new XMLPostManager(); // Handles the Volusion API call
            XmlDocument doc = manager.GetXMLFromURL(productsURL); // Get the results of the query in xml format

            sw = new StringWriter();
            XmlTextWriter tx = new XmlTextWriter(sw);
            doc.WriteTo(tx);

            XmlDataSource productSource = new XmlDataSource();
            productSource.ID = "ProductDataSource";
            productSource.Data = sw.ToString();

            ProductList.DataSource = productSource;
            ProductList.DataBind();
        }
        catch (Exception exception) { }
        finally {
            if (ProductList.Items.Count == 0)
                ProductStatus.Visible = true;
            else
                ProductStatus.Visible = false;
            if (sw != null)
                sw.Close();
        }
    }
     */
   
}